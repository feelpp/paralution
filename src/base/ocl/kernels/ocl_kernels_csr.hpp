// **************************************************************************
//
//    PARALUTION   www.paralution.com
//
//    Copyright (C) 2015  PARALUTION Labs UG (haftungsbeschr채nkt) & Co. KG
//                        Am Hasensprung 6, 76571 Gaggenau
//                        Handelsregister: Amtsgericht Mannheim, HRA 706051
//                        Vertreten durch:
//                        PARALUTION Labs Verwaltungs UG (haftungsbeschr채nkt)
//                        Am Hasensprung 6, 76571 Gaggenau
//                        Handelsregister: Amtsgericht Mannheim, HRB 721277
//                        Gesch채ftsf체hrer: Dimitar Lukarski, Nico Trost
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// **************************************************************************



// PARALUTION version 1.0.0 


#ifndef PARALUTION_OCL_KERNELS_CSR_HPP_
#define PARALUTION_OCL_KERNELS_CSR_HPP_

namespace paralution {

const char *ocl_kernels_csr =
	"__kernel void kernel_csr_spmv_scalar(const int nrow, __global const int *row_offset, __global const int *col,\n"
	"                                     __global const ValueType *val, __global const ValueType *in,\n"
	"                                     __global ValueType *out) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"\n"
	"  if (ai < nrow) {\n"
	"\n"
	"    ValueType sum = (ValueType)(0.0);\n"
	"\n"
	"    for (int aj=row_offset[ai]; aj<row_offset[ai+1]; ++aj)\n"
	"      sum += val[aj] * in[col[aj]];\n"
	"\n"
	"    out[ai] = sum;\n"
	"\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_add_spmv_scalar(const int nrow, __global const int *row_offset,\n"
	"                                         __global const int *col, __global const ValueType *val,\n"
	"                                         const ValueType scalar, __global const ValueType *in,\n"
	"                                         __global ValueType *out) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow) {\n"
	"\n"
	"    ValueType sum = out[ai];\n"
	"\n"
	"    for (aj=row_offset[ai]; aj<row_offset[ai+1]; ++aj)\n"
	"      sum += scalar * val[aj] * in[col[aj]];\n"
	"\n"
	"    out[ai] = sum;\n"
	"\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_scale_diagonal(const int nrow, __global const int *row_offset, __global const int *col,\n"
	"                                        const ValueType alpha, __global ValueType *val) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow)\n"
	"    for (aj=row_offset[ai]; aj<row_offset[ai+1]; ++aj)\n"
	"      if (ai == col[aj])\n"
	"        val[aj] = alpha * val[aj];\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_scale_offdiagonal(const int nrow, __global const int *row_offset, __global const int *col,\n"
	"                                           const ValueType alpha, __global ValueType *val) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow)\n"
	"    for (aj=row_offset[ai]; aj<row_offset[ai+1]; ++aj)\n"
	"      if (ai != col[aj])\n"
	"        val[aj] = alpha * val[aj];\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_add_diagonal(const int nrow, __global const int *row_offset,\n"
	"                                      __global const int *col, const ValueType alpha, __global ValueType *val) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow)\n"
	"    for (aj=row_offset[ai]; aj<row_offset[ai+1]; ++aj)\n"
	"      if (ai == col[aj])\n"
	"        val[aj] += alpha;\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_add_offdiagonal(const int nrow, __global const int *row_offset,\n"
	"                                         __global const int *col, const ValueType alpha, __global ValueType *val) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow)\n"
	"    for (aj=row_offset[ai]; aj<row_offset[ai+1]; ++aj)\n"
	"      if (ai != col[aj])\n"
	"        val[aj] += alpha;\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_extract_diag(const int nrow, __global const int *row_offset, __global const int *col,\n"
	"                                      __global const ValueType *val, __global ValueType *vec) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow)\n"
	"    for (aj=row_offset[ai]; aj<row_offset[ai+1]; ++aj)\n"
	"      if (ai == col[aj])\n"
	"        vec[ai] = val[aj];\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_extract_inv_diag(const int nrow, __global const int *row_offset,\n"
	"                                          __global const int *col, __global const ValueType *val,\n"
	"                                          __global ValueType *vec) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow)\n"
	"    for (aj=row_offset[ai]; aj<row_offset[ai+1]; ++aj)\n"
	"      if (ai == col[aj])\n"
	"        vec[ai] = (ValueType)(1.0) / val[aj];\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_extract_submatrix_row_nnz(__global const int *row_offset, __global const int *col,\n"
	"                                                   __global const ValueType *val, const int smrow_offset,\n"
	"                                                   const int smcol_offset, const int smrow_size,\n"
	"                                                   const int smcol_size, __global int *row_nnz) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < smrow_size) {\n"
	"\n"
	"    int nnz = 0;\n"
	"    int ind = ai + smrow_offset;\n"
	"\n"
	"    for (aj=row_offset[ind]; aj<row_offset[ind+1]; ++aj)\n"
	"\n"
	"      if ( (col[aj] >= smcol_offset) &&\n"
	"           (col[aj] <  smcol_offset + smcol_size) )\n"
	"        ++nnz;\n"
	"\n"
	"    row_nnz[ai] = nnz;\n"
	"\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_extract_submatrix_copy(__global const int *row_offset, __global const int *col,\n"
	"                                                __global const ValueType *val, const int smrow_offset,\n"
	"                                                const int smcol_offset, const int smrow_size,\n"
	"                                                const int smcol_size, __global const int *sm_row_offset,\n"
	"                                                __global int *sm_col, __global ValueType *sm_val) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < smrow_size) {\n"
	"\n"
	"    int row_nnz = sm_row_offset[ai];\n"
	"    int ind = ai + smrow_offset;\n"
	"\n"
	"    for (aj=row_offset[ind]; aj<row_offset[ind+1]; ++aj) {\n"
	"\n"
	"      if ( (col[aj] >= smcol_offset) &&\n"
	"           (col[aj] <  smcol_offset + smcol_size) ) {\n"
	"\n"
	"        sm_col[row_nnz] = col[aj] - smcol_offset;\n"
	"        sm_val[row_nnz] = val[aj];\n"
	"        ++row_nnz;\n"
	"\n"
	"      }\n"
	"\n"
	"    }\n"
	"\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_diagmatmult_r(const int nrow, __global const int *row_offset, __global const int *col,\n"
	"                                       __global const ValueType *diag, __global ValueType *val) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow)\n"
	"    for (aj=row_offset[ai]; aj<row_offset[ai+1]; ++aj)\n"
	"      val[aj] = val[aj] * diag[col[aj]];\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_diagmatmult_l(const int nrow, __global const int *row_offset,\n"
	"                                       __global const ValueType *diag, __global ValueType *val) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow)\n"
	"    for (aj=row_offset[ai]; aj<row_offset[ai+1]; ++aj)\n"
	"      val[aj] = val[aj] * diag[ai];\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_add_csr_same_struct(const int nrow, __global const int *out_row_offset,\n"
	"                                             __global const int *out_col, __global const int *in_row_offset,\n"
	"                                             __global const int *in_col, __global const ValueType *in_val,\n"
	"                                             const ValueType alpha, const ValueType beta, __global ValueType *out_val) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj, ajj;\n"
	"\n"
	"  if (ai < nrow) {\n"
	"\n"
	"    int first_col = in_row_offset[ai];\n"
	"      \n"
	"    for (ajj=out_row_offset[ai]; ajj<out_row_offset[ai+1]; ++ajj)\n"
	"      for (aj=first_col; aj<in_row_offset[ai+1]; ++aj)\n"
	"        if (in_col[aj] == out_col[ajj]) {\n"
	"          \n"
	"          out_val[ajj] = alpha * out_val[ajj] + beta * in_val[aj];\n"
	"          ++first_col;\n"
	"          break;\n"
	"\n"
	"        }\n"
	"\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_buffer_addscalar(const int size, const ValueType scalar, __global ValueType *buff) {\n"
	"\n"
	"  int gid = get_global_id(0);\n"
	"\n"
	"  if (gid < size)\n"
	"    buff[gid] += scalar;\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_reverse_index(const int size, __global const int *perm, __global int *out) {\n"
	"\n"
	"  int gid = get_global_id(0);\n"
	"\n"
	"  if (gid < size)\n"
	"    out[perm[gid]] = gid;\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_calc_row_nnz(const int nrow, __global const int *row_offset, __global int *row_nnz) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"\n"
	"  if (ai < nrow)\n"
	"    row_nnz[ai] = row_offset[ai+1]-row_offset[ai];\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_permute_row_nnz(         const int  nrow,\n"
	"                                         __global const int *row_nnz_src,\n"
	"                                         __global const int *perm_vec,\n"
	"                                         __global       int *row_nnz_dst) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"\n"
	"  if (ai < nrow)\n"
	"    row_nnz_dst[perm_vec[ai]] = row_nnz_src[ai];\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_permute_rows(       const       int  nrow,\n"
	"                                    __global const       int *row_offset,\n"
	"                                    __global const       int *perm_row_offset,\n"
	"                                    __global const       int *col,\n"
	"                                    __global const ValueType *data,\n"
	"                                    __global const       int *perm_vec,\n"
	"                                    __global const       int *row_nnz,\n"
	"                                    __global             int *perm_col,\n"
	"                                    __global       ValueType *perm_data) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"\n"
	"  if (ai < nrow) {\n"
	"\n"
	"    int num_elems = row_nnz[ai];\n"
	"    int perm_index = perm_row_offset[perm_vec[ai]];\n"
	"    int prev_index = row_offset[ai];\n"
	"\n"
	"    for (int i = 0; i < num_elems; ++i) {\n"
	"      perm_data[perm_index + i] = data[prev_index + i];\n"
	"      perm_col[perm_index + i]  = col[prev_index + i];\n"
	"    }\n"
	"\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_permute_cols(         const       int  nrow,\n"
	"                                      __global const       int *row_offset,\n"
	"                                      __global const       int *perm_vec,\n"
	"                                      __global const       int *row_nnz,\n"
	"                                      __global const       int *perm_col,\n"
	"                                      __global const ValueType *perm_data,\n"
	"                                      __global             int *col,\n"
	"                                      __global       ValueType *data) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int j;\n"
	"\n"
	"  if (ai < nrow) {\n"
	"\n"
	"    int num_elems = row_nnz[ai];\n"
	"    int elem_index = row_offset[ai];\n"
	"\n"
	"    for (int i = 0; i < num_elems; ++i) {\n"
	"\n"
	"      int comp = perm_vec[perm_col[elem_index+i]];\n"
	"\n"
	"      for (j = i-1; j >= 0 ; --j) {\n"
	"\n"
	"        if (col[elem_index+j]>comp) {\n"
	"          data[elem_index+j+1] = data[elem_index+j];\n"
	"          col[elem_index+j+1]  = col[elem_index+j];\n"
	"        } else\n"
	"          break;\n"
	"      }\n"
	"\n"
	"      data[elem_index+j+1] = perm_data[elem_index+i];\n"
	"      col[elem_index+j+1]  = comp;\n"
	"\n"
	"    }\n"
	"\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_extract_l_triangular(const int nrow,\n"
	"                                              __global const int *src_row_offset, __global const int *src_col,\n"
	"                                              __global const ValueType *src_val,  __global int *nnz_per_row,\n"
	"                                              __global int *dst_col, __global ValueType *dst_val) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow) {\n"
	"\n"
	"      int dst_index = nnz_per_row[ai];\n"
	"      int src_index = src_row_offset[ai];\n"
	"\n"
	"    for (aj=0; aj<nnz_per_row[ai+1]-nnz_per_row[ai]; ++aj) {\n"
	"      \n"
	"      dst_col[dst_index] = src_col[src_index];\n"
	"      dst_val[dst_index] = src_val[src_index];\n"
	"      \n"
	"      ++dst_index;\n"
	"      ++src_index;\n"
	"      \n"
	"    }\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_extract_u_triangular(const int nrow,\n"
	"                                              __global const int *src_row_offset, __global const int *src_col,\n"
	"                                              __global const ValueType *src_val,  __global int *nnz_per_row,\n"
	"                                              __global int *dst_col, __global ValueType *dst_val) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow) {\n"
	"\n"
	"      int num_elements = nnz_per_row[ai+1]-nnz_per_row[ai];\n"
	"      int dst_index = nnz_per_row[ai];\n"
	"      int src_index = src_row_offset[ai+1]-num_elements;\n"
	"\n"
	"    for (aj=0; aj<num_elements; ++aj) {\n"
	"      \n"
	"      dst_col[dst_index] = src_col[src_index];\n"
	"      dst_val[dst_index] = src_val[src_index];\n"
	"      \n"
	"      ++dst_index;\n"
	"      ++src_index;\n"
	"      \n"
	"    }\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_slower_nnz_per_row(const int nrow, __global const int *src_row_offset,\n"
	"                                            __global const int *src_col, __global int *nnz_per_row) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"  \n"
	"  if (ai < nrow) {\n"
	"    nnz_per_row[ai+1] = 0;\n"
	"    for (aj=src_row_offset[ai]; aj<src_row_offset[ai+1]; ++aj)\n"
	"      if (src_col[aj] < ai)\n"
	"        ++nnz_per_row[ai+1];\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_supper_nnz_per_row(const int nrow, __global const int *src_row_offset,\n"
	"                                            __global const int *src_col, __global int *nnz_per_row) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow) {\n"
	"    nnz_per_row[ai+1] = 0;\n"
	"    for (aj=src_row_offset[ai]; aj<src_row_offset[ai+1]; ++aj)\n"
	"      if (src_col[aj] > ai)\n"
	"        ++nnz_per_row[ai+1];\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_lower_nnz_per_row(const int nrow, __global const int *src_row_offset,\n"
	"                                           __global const int *src_col, __global int *nnz_per_row) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow) {\n"
	"    nnz_per_row[ai+1] = 0;\n"
	"    for (aj=src_row_offset[ai]; aj<src_row_offset[ai+1]; ++aj)\n"
	"      if (src_col[aj] <= ai)\n"
	"        ++nnz_per_row[ai+1];\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_upper_nnz_per_row(const int nrow, __global const int *src_row_offset,\n"
	"                                           __global const int *src_col, __global int *nnz_per_row) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow) {\n"
	"    nnz_per_row[ai+1] = 0;\n"
	"    for (aj=src_row_offset[ai]; aj<src_row_offset[ai+1]; ++aj)\n"
	"      if (src_col[aj] >= ai)\n"
	"        ++nnz_per_row[ai+1];\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_compress_count_nrow(__global const int *row_offset, __global const int *col,\n"
	"                                             __global const ValueType *val, const int nrow, const double drop_off,\n"
	"                                             __global int *row_offset_new) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow) {\n"
	"    for (aj=row_offset[ai]; aj<row_offset[ai+1]; ++aj) {\n"
	"\n"
	"      if ( (fabs(val[aj]) > drop_off) ||\n"
	"           ( col[aj] == ai))\n"
	"        row_offset_new[ai]++;\n"
	"    }\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void kernel_csr_compress_copy(__global const int *row_offset, __global const int *col,\n"
	"                                       __global const ValueType *val, const int nrow, const double drop_off,\n"
	"                                       __global const int *row_offset_new, __global int *col_new,\n"
	"                                       __global ValueType *val_new) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"  int ajj = row_offset_new[ai];\n"
	"\n"
	"  if (ai < nrow) {\n"
	"\n"
	"    for (aj=row_offset[ai]; aj<row_offset[ai+1]; ++aj) {\n"
	"\n"
	"      if ( (fabs(val[aj]) > drop_off) ||\n"
	"           ( col[aj] == ai)) {\n"
	"        col_new[ajj] = col[aj];\n"
	"        val_new[ajj] = val[aj];\n"
	"        ajj++;\n"
	"      }\n"
	"    }\n"
	"\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
// Extract column vector
	"__kernel void kernel_csr_extract_column_vector(__global const int *row_offset, __global const int *col,\n"
	"                                               __global const ValueType *val, const int nrow, const int idx,\n"
	"                                               __global ValueType *vec) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"\n"
	"  if (ai < nrow) {\n"
	"\n"
	"    vec[ai] = (ValueType)(0.0);\n"
	"\n"
	"    for (aj=row_offset[ai]; aj<row_offset[ai+1]; ++aj)\n"
	"      if (idx == col[aj])\n"
	"        vec[ai] = val[aj];\n"
	"\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
// Replace column vector - compute new offset
	"__kernel void kernel_csr_replace_column_vector_offset(__global const int *row_offset, __global const int *col,\n"
	"                                                      const int nrow, const int idx,\n"
	"                                                      __global const ValueType *vec, __global int *offset) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj;\n"
	"  int add = 1;\n"
	"\n"
	"  if (ai < nrow) {\n"
	"\n"
	"    offset[ai+1] = row_offset[ai+1] - row_offset[ai];\n"
	"\n"
	"    for (aj=row_offset[ai]; aj<row_offset[ai+1]; ++aj) {\n"
	"      if (col[aj] == idx) {\n"
	"        add = 0;\n"
	"        break;\n"
	"      }\n"
	"    }\n"
	"\n"
	"    if (add == 1 && vec[ai] != (ValueType)(0.0))\n"
	"      ++offset[ai+1];\n"
	"\n"
	"    if (add == 0 && vec[ai] == (ValueType)(0.0))\n"
	"      --offset[ai+1];\n"
	"\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
// Replace column vector - compute new offset
	"__kernel void kernel_csr_replace_column_vector(__global const int *row_offset, __global const int *col,\n"
	"                                               __global const ValueType *val, const int nrow, const int idx,\n"
	"                                               __global const ValueType *vec, __global const int *offset,\n"
	"                                               __global int *new_col, __global ValueType *new_val) {\n"
	"\n"
	"  int ai = get_global_id(0);\n"
	"  int aj = row_offset[ai];\n"
	"  int k  = offset[ai];\n"
	"\n"
	"  if (ai < nrow) {\n"
	"\n"
	"    for (; aj<row_offset[ai+1]; ++aj) {\n"
	"      if (col[aj] < idx) {\n"
	"        new_col[k] = col[aj];\n"
	"        new_val[k] = val[aj];\n"
	"        ++k;\n"
	"      } else\n"
	"        break;\n"
	"    }\n"
	"\n"
	"    if (vec[ai] != (ValueType)(0.0)) {\n"
	"      new_col[k] = idx;\n"
	"      new_val[k] = vec[ai];\n"
	"      ++k;\n"
	"      ++aj;\n"
	"    }\n"
	"\n"
	"    for (; aj<row_offset[ai+1]; ++aj) {\n"
	"      if (col[aj] > idx) {\n"
	"        new_col[k] = col[aj];\n"
	"        new_val[k] = val[aj];\n"
	"        ++k;\n"
	"      }\n"
	"    }\n"
	"\n"
	"  }\n"
	"\n"
	"}\n"
	"\n"
;
}

#endif // PARALUTION_OCL_KERNELS_CSR_HPP_
